@page "/category"
@inject HttpClient http
@using System.Text.Json

<div>
	<a class="btn btn-success" href="category/add">New Category</a>
</div>

<h2>Categories</h2>

@if(categories == null)
{
	<p><em>Loading...</em></p>
}
else if (categories.Count == 0)
{
	<p><em>No categories</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Category</th>
				<th>Description</th>
				<th>Edit</th>
				<th>Delete</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var category in categories)
			{
				<tr>
					<td>@category.Name</td>
					<td>@category.Description</td>
					<td><a class="btn btn-primary" href="category/edit/@category.CategoryId">Edit</a></td>
					<td><a class="btn btn-danger" @onclick="@(() => RemoveCategory(category.CategoryId))">Delete</a></td>
				</tr>
			}
			
		</tbody>
	</table>
}

<ConfirmDialog
	@ref="confirmDialog" 
	onCancel="@NotConfirmRemove"
	onConfirm="@ConfirmRemove">
	<div>This action couldn't be reverted</div>
</ConfirmDialog>

<hr />
<Pagination
	TotalPages="TotalPages" 
	ActualPage="ActualPage"
	Raio="2"
	SelectedPage="SelectedPage">
</Pagination>

@code {

	List<Category>? categories { get; set; }

	private int TotalPages;
	private int ActualPage = 1;


	ConfirmDialog? confirmDialog;
	int categoryIdToBeRemoved;

	protected override async Task OnInitializedAsync()
	{
		await LoadCategories();
	}

	private async Task SelectedPage(int page)
	{
		ActualPage = page;
		await LoadCategories(page);
	}

	async Task LoadCategories(int page = 1, int totalPerPage = 5)
	{
		//categories = await http.GetFromJsonAsync<Category[]>("api/category");
		var httpResponse = await http.GetAsync($"api/category?page={page}&totalPerPage={totalPerPage}");

		if (httpResponse.IsSuccessStatusCode)
		{
			string? totalPerPageHeader = httpResponse.Headers.GetValues("totalPages").FirstOrDefault();
			TotalPages = String.IsNullOrEmpty(totalPerPageHeader) ? 1 : int.Parse(totalPerPageHeader);

			var responseString = await httpResponse.Content.ReadAsStringAsync();

			categories = JsonSerializer.Deserialize<List<Category>>(responseString,
				new JsonSerializerOptions()
				{
					PropertyNameCaseInsensitive = true
				});
		}
		else 
		{
			TotalPages = 1;
			categories = new List<Category>();
			Category cat = new Category()
				{
					CategoryId = 1,
					Name = "Erro",
					Description = httpResponse.StatusCode.ToString()

				};

		}
	}

	void RemoveCategory(int categoryId)
	{
		confirmDialog?.Show();
		categoryIdToBeRemoved = categoryId;

	}

	async Task ConfirmRemove()
	{
		await http.DeleteAsync($"api/category/{categoryIdToBeRemoved}");
		confirmDialog?.Hide();
		await LoadCategories();
	}

	void NotConfirmRemove()
	{
		confirmDialog?.Hide();
	}
}
